% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/licodIteratif.R
\name{community.licodIteratif}
\alias{community.licodIteratif}
\title{Iteratif Licod community detection algorithm}
\usage{
community.licodIteratif(graph, sigma, centrality1, centrality2, delta, vote_fun, sim_fun, memb_fun, verbose, max_iter)
}
\arguments{
\item{graph}{: The input igraph graph}

\item{sigma}{: is a threshold in [0; 1]. It is used to know if a node is a leader.}

\item{centrality1}{: is a topological centrality in graphs as degree, closeness, betweenness...}

\item{centrality2}{: is a topological centrality in graphs as degree, closeness, betweenness...}

\item{delta}{: is a threshold in [0; 1]. Two leaders are linked if their topological similarity is above delta.}

\item{vote_fun}{: The vote function that should be used to compute the membership vector.}

\item{sim_fun}{: is the similarity function. i.e similarity.invlogweighted, similarity.jaccard, similarity.dice,...}

\item{memb_fun}{: is the membership function i.e mean, sum, ...}

\item{verbose}{: verbose}

\item{max_iter}{:  max number of iterations if not stablized}
}
\value{
returns an igraph  communities object, please see igraph manual page for details.
}
\description{
This applies the iterative version of the Licod algorithm as described in VCSJ 2014 (Yakoubi and Kanawati, 2014)
}
\examples{
g <- graph.famous("Zachary")
wt <- community.licodIteratif(g)
 V(g)$color <- wt$membership+1
 g$layout <- layout.fruchterman.reingold
 plot(g, vertex.label=NA)
}
\references{
Yakoubi, Z. et R. Kanawati (2014). Licod : Leader-driven approaches for community detection. Vietnam Journal of Computer Science - Springer 1, 241-256.
}
\author{
Issam Falih <issam.falih@lipn.univ-paris13.fr>
}
